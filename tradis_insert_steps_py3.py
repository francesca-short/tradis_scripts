#!/usr/bin/env python
from Bio import SeqIO
from Bio import SeqFeature
import sys
import argparse
import pprint
import numpy as np
import csv
import gzip

# Prepare input arguments
parser = argparse.ArgumentParser(description="This script assigns reads and insertion sites from a TraDIS plot file generated by the bio:tradis pipeline to genome regions of a given size. Output is a csv file with the start, end, insertion site count and read count for each genomic region.")
parser.add_argument('plot', help="Input plot file")
parser.add_argument('step', help="Step size for sampling genome", type=int)
parser.add_argument('-o', '--output', help = 'output file prefix')
args = parser.parse_args()
if args.output == None:
    args.output = args.plot

# Read in plot file and strip newline characters, convert to table with 2 columns
file_path = args.plot
with open(file_path, 'r') as f:
    plot = np.asarray([elem.strip().split(' ') for elem in f], dtype=int)
print("Read in plot file: " + args.plot)

# open output csv file
outputfilename = (args.output + "_stepwise_read_insert_sites.csv")
csvfile = open(outputfilename, 'w', encoding='utf8', newline='')
writer = csv.writer(csvfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
header = (
"Start", "End", "Insert_sites", "Reads")
writer.writerow(header)

#New option (quicker), counts a new n reads in shuffled read list each iteration, adds to total ins count
end = args.step
start = 0
while end < (len(plot) - args.step):
    insertion_sites = np.count_nonzero(plot[start:end, 0:2])
    reads = plot[start:end, 0:2].sum()
    row = (start, end, insertion_sites, reads)
    writer.writerow(row)
    start += args.step
    end += args.step
    
print("Reads and insertion sites counted in " + args.plot)