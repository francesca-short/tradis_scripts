#!/usr/bin/env python
from Bio import SeqIO
from Bio import SeqFeature
import sys
import argparse
import pprint
import numpy as np
import csv
import gzip

# Prepare input arguments
parser = argparse.ArgumentParser(description="This script assigns reads and insertion sites from a TraDIS plot file generated by the bio:tradis pipeline to genes in a reference embl or genbank file. Output is a csv file for reading into R for essentiality calculations or comparisons between conditions.")
parser.add_argument('plot', help="Input plot file")
parser.add_argument('reference', help="Reference file in .embl/.gb format")
parser.add_argument('-o', '--output', help = 'output file prefix')
parser.add_argument('-t3','--trim3', help = "proportion of gene sequence to trim from 3' end", default=0, type = float)
parser.add_argument('-t5','--trim5', help = "proportion of gene sequence to trim from 5' end", default=0, type = float)
args = parser.parse_args()
if args.output == None:
    args.output = args.plot

# Read in reference file (print error message if reference file wrong format)
if 'embl' in args.reference:
	reference_seqrecord = SeqIO.read(args.reference, 'embl')
elif 'gb' in args.reference:
	reference_seqrecord = SeqIO.read(args.reference, 'gb')
elif 'gbk' in args.reference:
	reference_seqrecord = SeqIO.read(args.reference, 'gbk')
else:
	sys.exit("Reference file must be in embl or genbank format with '.embl', '.gb' or '.gbk' file extension")
print("Read in reference file: " + args.reference)

# Read in plot file and strip newline characters, convert to table with 2 columns
file_path = args.plot
if 'gz' in file_path:
    with gzip.open(file_path) as f:
        plot = np.asarray([elem.strip().split(' ') for elem in f], dtype=int)
else:
    with open(file_path) as f:
        plot = np.asarray([elem.strip().split(' ') for elem in f], dtype=int)
print("Read in plot file: " + args.plot)

# Check length equal, kill script if not
def length_check(plot, reference):
    print("Rows in plot file: " + str(len(plot)))
    print("Length of reference genome: " + str(len(reference)))
    if len(plot) == len(reference):
        print("Reference and plot files match")
    else:
        sys.exit("Reference and plot files unequal lengths, check reference")

length_check(plot, reference_seqrecord)

# open output csv file
outputfilename = (args.output + "_gene_insert_sites.csv")
csvfile = open(outputfilename, 'wb')
writer = csv.writer(csvfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
header = (
"locus_tag", "gene_name", "type", "start", "end", "strand", "read_count", "ins_index", "gene_length", "ins_count","function")
writer.writerow(header)

#define function to count insertion site and read counts for each gene and write relevant info to csv file
def count_ins_and_reads_write_to_csv(gene):
    strand = int(gene.location.strand)
    if strand == 1:
        trim_start = (int(gene.location.start) + int(args.trim5*len(gene)))
        trim_end = (int(gene.location.end) - int(args.trim3 * len(gene)))
        reads = plot[trim_start:trim_end, 0:2].sum()
        insertion_sites = np.count_nonzero(plot[trim_start:trim_end, 0:2])
    else:
        trim_end = (int(gene.location.start) + int((args.trim3)*len(gene)))
        trim_start = (int(gene.location.end) - int((args.trim5)*len(gene)))
        reads = plot[trim_end:trim_start, 0:2].sum()
        insertion_sites = np.count_nonzero(plot[trim_end:trim_start, 0:2])
    realstart = int(gene.location.start)+1
    realend = int(gene.location.end)
    insertion_index = (insertion_sites) / float((len(gene))*(1-args.trim3-args.trim5))
    function = (gene.qualifiers.get('product', '-')[0])
    locus_tag = (gene.qualifiers.get('locus_tag', '-'))
    gene_name = (gene.qualifiers.get('gene', locus_tag)[0])
    row = (locus_tag[0], gene_name, gene.type, realstart, realend, strand, reads, insertion_index, len(gene), insertion_sites, function)
    writer.writerow(row)

#call insert site count function for every feature except for excluded categories (repeats etc)
for gene in reference_seqrecord.features:
    if gene.type == 'source':
        continue
    if gene.type == 'gene':
        continue
    if gene.type == 'repeat_region':
        continue
    if gene.type == 'mobile_element':
        continue
    if gene.type == 'regulatory':
        continue
    if gene.type == 'misc_feature':
        continue
    count_ins_and_reads_write_to_csv(gene)

print("Gene insert site counts written to " + outputfilename)